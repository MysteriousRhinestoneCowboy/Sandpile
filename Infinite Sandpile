import numpy as np
from numpy import *
import tkinter as tk
from tkinter import *
import PIL
from PIL import Image
import tkcolorpicker


class MenuDialogue:
    def __init__(self, parent, options=("A", "B", "C", "D"), prompt="", title=None, style="MULTIPLE"):
        self.selected = None
        self.window = Toplevel()
        self.window.title(title)
        self.options = options
        Label(self.window, text=prompt).pack(side=TOP)
        if style == "MULTIPLE":
            self.menu = Listbox(self.window, selectmode=MULTIPLE)
        elif style == "SINGLE":
            self.menu = Listbox(self.window, selectmode=SINGLE)
        elif style == "EXTENDED":
            self.menu = Listbox(self.window, selectmode=EXTENDED)
        self.menu.pack(side=TOP)

        for option in options:
            self.menu.insert(END, option)

        width0 = 200
        width1 = self.window.winfo_reqwidth()
        width = max(width0, width1)

        buttonFrame = Frame(self.window, height=22, width=width)
        buttonFrame.pack(fill=X, side=TOP)
        buttonFrame.pack_propagate(0)

        buttonFrameLeft = Frame(buttonFrame, width=width // 2, height=22)
        buttonFrameLeft.pack(side=LEFT)
        buttonFrameLeft.pack_propagate(0)

        buttonFrameRight = Frame(buttonFrame, width=width // 2, height=22)
        buttonFrameRight.pack(side=RIGHT)
        buttonFrameRight.pack_propagate(0)

        Button(buttonFrameLeft, text="OK", command=self.OK, width=width).pack(fill=X)
        Button(buttonFrameRight, text="cancel", command=self.cancel, width=width).pack(fill=X)

        self.window.bind("<Return>", self.OK)
        self.window.bind("<Escape>", self.cancel)

        parent.wait_window(self.window)

    def OK(self, event=None):
        self.selected = self.menu.curselection()
        self.window.destroy()
        input = self.selected
        self.selected = [self.options[int(indx)] for indx in input]

    def cancel(self, event=None):
        self.window.destroy()

    def get(self):
        return self.selected


class EntryDialogue:
    def __init__(self, parent, prompt="", oldValue=None, title=None, varType="int"):
        self.value = oldValue
        self.varType = varType
        self.window = Toplevel()

        Label(self.window, text=prompt).pack(fill=X, side=TOP)
        self.window.title(title)

        self.var = StringVar()
        self.var.set(oldValue)
        self.entry = Entry(self.window, textvariable=self.var)
        self.entry.pack(fill=X, side=TOP)

        width = self.window.winfo_reqwidth() // 2

        buttonFrame = Frame(self.window, height=22)
        buttonFrame.pack(fill=X, side=BOTTOM)
        buttonFrame.pack_propagate(0)

        buttonFrameLeft = Frame(buttonFrame, width=width, height=22)
        buttonFrameLeft.pack(side=LEFT)
        buttonFrameLeft.pack_propagate(0)

        buttonFrameRight = Frame(buttonFrame, width=width, height=22)
        buttonFrameRight.pack(side=RIGHT)
        buttonFrameRight.pack_propagate(0)

        Button(buttonFrameLeft, text="OK", command=self.OK, width=width).pack(fill=X)
        Button(buttonFrameRight, text="cancel", command=self.cancel, width=width).pack(fill=X)

        self.entry.bind("<Return>", self.OK)
        self.entry.focus_set()
        self.window.bind("<Escape>", self.cancel)

        parent.wait_window(self.window)

    def cancel(self, event=None):
        self.window.destroy()

    def OK(self, event=None):
        input = self.entry.get()
        if self.varType == "int":
            try:
                self.value = int(input)
                self.window.destroy()
            except:
                pass

        else:
            self.value = input
            self.window.destroy()

    def get(self):
        return self.value


class ColorDialogue:
    def __init__(self, parent, colors, labels, format="hex"):
        self.items = labels
        self.format = format

        if self.format == "RGBA":
            self.colors = []
            for color in colors:
                RGBColor = (color[0], color[1], color[2])
                self.colors.append(RGBColor)
        else:
            self.colors = colors

        self.values = colors[:]
        self.window = Toplevel(parent)
        self.window.title("Set Colors")
        self.window.bind("<Escape>", self.cancel)
        self.window.bind("<Return>", self.ok)
        self.labels = {}

        count = 0
        for item in labels:
            fore = self.contrast(self.colors[count])
            label = Label(self.window, text=item, bg=self.colors[count], fg=fore, width=14)
            label.grid(row=2 * count, column=0)
            Button(self.window, text="Change", width=6, command=lambda count=count: self.chooseColor(count)).grid(row=2 * count, column=1)
            self.labels[item] = label
            Frame(self.window, height=5, width=100).grid(row=2 * count + 1, columnspan=2)
            count += 1

        buttonFrame = Frame(self.window, height=20, width=200)
        buttonFrame.grid(row=count * 2, columnspan=2)
        buttonFrame.pack_propagate(0)
        Button(buttonFrame, text="OK", command=self.ok, width=10).pack(side=LEFT)
        Button(buttonFrame, text="cancel", command=self.cancel, width=10).pack(side=RIGHT)

        parent.wait_window(self.window)

    def contrast(self, color):
        if self.format == "hex":
            output = "#"
            for bit in color:
                if bit == "0":
                    output += "7"
                if bit == "1":
                    output += "8"
                if bit == "2":
                    output += "9"
                if bit == "3":
                    output += "A"
                if bit == "4":
                    output += "B"
                if bit == "5":
                    output += "C"
                if bit == "6":
                    output += "D"
                if bit == "7":
                    output += "E"
                if bit == "8":
                    output += "F"
                if bit == "9":
                    output += "0"
                if bit == "A":
                    output += "1"
                if bit == "B":
                    output += "2"
                if bit == "C":
                    output += "3"
                if bit == "D":
                    output += "4"
                if bit == "E":
                    output += "5"
                if bit == "F":
                    output += "6"

        elif self.format== "RGB" or self.format == "RGBA":
            output = []
            for indx in range(3):
                bit = (color[indx] + 128) % 256
                output.append(bit)

            if self.format == "RGBA":
                output.append(255)
            tuple(output)

        return output


    def ok(self, event=None):
        self.window.destroy()

    def cancel(self, event=None):
        self.values = self.colors
        self.window.destroy()

    def get(self):
        return self.values

    def chooseColor(self, indx):
        print(indx)
        startColor = self.values[indx]
        color = self.getColor(startColor)
        if color == None:
            pass
        else:
            contrast = self.contrast(color)
            self.values[indx] = color
            label = self.labels[self.items[indx]]
            label.config(bg=color, fg=contrast)

    def getColor(self, startColor):
        color = tkcolorpicker.askcolor(color=startColor, parent=self.window)
        if self.format == "RGB":
            return color[0]
        elif self.format == "RGBA":
            output = (color[0][0], color[0][1], color[0][2], 255)
            return output
        elif self.format == "hex":
            return color[1]


class Interface:
    def __init__(self, width=130, height=70):
        self.root = tk.Tk()
        sizeStr = "{}x{}".format(str(width), str(height))
        self.root.geometry(sizeStr)
        self.root.pack_propagate(0)
        self.root.title("Pile")

        self.cellShape = "Square"
        self.directions = ((1, 0), (0, 1), (-1, 0), (0, -1))
        self.directionNum = len(self.directions)
        self.colors = ["#003300", "#005500", "#007700", "#009900",
                       "#00BB00", "#00DD00", "#00FF00"]
        self.cells = {}

        self.shapeButton = Button(self.root, text=self.cellShape, command=self.changeShape)
        self.shapeButton.pack(side=TOP, fill=X)
        self.rulesButton = Button(self.root, text="Colors", command=self.changeColor)
        self.rulesButton.pack(side=TOP, fill=X)
        self.generationButton = Button(self.root, text="Height", command=self.generate)
        self.generationButton.pack(side=TOP, fill=X)

        self.root = mainloop()

    def changeColor(self):
        neighbors = []
        for i in range(1, self.directionNum):
            neighbors.append(str(i))
        self.colors = ColorDialogue(self.root, self.colors, neighbors).get()

    def changeShape(self):
        newShape = MenuDialogue(self.root, options=("Square", "Moore", "Hex", "Tri"), prompt="Choose the shape of the cell",
                                title="Change Shape", style="SINGLE").get()
        if newShape is not None:
            newShape = newShape[0]
            self.shapeButton.config(text=newShape)
            self.cellShape = newShape

            if newShape == "Square":
                self.directions = ((1, 0), (0, 1), (-1, 0), (0, -1))
            elif newShape == "Moore":
                self.directions = ((1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (-1, -1), (0, -1), (1, -1))
            elif newShape == "Hex":
                self.directions = ((1, 0), (1, 1), (0, 1), (-1, 0), (-1, -1), (0, -1))
            elif newShape == "Tri":
                self.directions = (((0, 0), (1, 0), (0, -1)))
            self.directionNum = len(self.directions)

    def generate(self):
        height = EntryDialogue(self.root, prompt="How tall will the starting pile be?").get()
        print(height)
        if height == None:
            pass

        else:
            self.generation(height)
            self.render()

    def generation(self, height=0):
        tooTall = True
        if self.cellShape == "Tri":
            self.cells[(0, 0, 1)] = height
        else:
            self.cells[(0, 0)] = height
        checks = self.cells

        while tooTall == True:
            changes = {}
            tooTall = False
            for cell in checks:
                if self.cells[cell] >= self.directionNum:
                    tooTall = True
                    neighbors = self.getNeighbors(cell)
                    for neighbor in neighbors:
                        newHeight = changes.get(neighbor, 0) + 1
                        changes[neighbor] = newHeight
                    newHeight = changes.get(cell, 0) - self.directionNum
                    changes[cell] = newHeight

            checks = []
            for cell in changes:
                checks.append(cell)
                newHeight = self.cells.get(cell, 0) + changes[cell]
                self.cells[cell] = newHeight

    def getNeighbors(self, cell):
        neighbors = []
        if self.cellShape == "Tri":
            orientation = cell[2]
            for direction in self.directions:
                newCell = (cell[0] + orientation * direction[0], cell[1] + orientation * direction[1], -1 * orientation)
                neighbors.append(newCell)
        else:
            for direction in self.directions:
                newCell = (cell[0] + direction[0], cell[1] + direction[1])
                neighbors.append(newCell)

        return neighbors


    def render(self):
        values = []
        for cell in self.cells:
            if self.cells[cell] != 0:
                values.append((cell, self.cells[cell]))

        colors = self.hex2RGB()

        PileImage(self.cellShape, self.cells, colors)

        self.cells = {}

    def hex2RGB(self):
        colors = [(0, 0, 0, 0)]
        indx = 0
        for color in self.colors:
            colorNumerals = []
            for bit in color:
                if bit == "#":
                    pass
                elif bit == "A":
                    colorNumerals.append(10)
                elif bit == "B":
                    colorNumerals.append(11)
                elif bit == "C":
                    colorNumerals.append(12)
                elif bit == "D":
                    colorNumerals.append(13)
                elif bit == "E":
                    colorNumerals.append(14)
                elif bit == "F":
                    colorNumerals.append(15)
                else:
                    colorNumerals.append(int(bit))

            redBit = colorNumerals[0] * 16 + colorNumerals[1]
            greenBit = colorNumerals[2] * 16 + colorNumerals[3]
            blueBit = colorNumerals[4] * 16 + colorNumerals[5]

            colors.append((redBit, greenBit, blueBit, 255))
            indx += 1

        return colors
        print(self.colors)


class PileImage:
    def __init__(self, shape, values, colors):
        self.values = values
        self.cells = []
        for value in self.values:
            if self.values[value] != 0:
                self.cells.append(value)
        self.colors = colors

        if shape == "Square" or shape == "Moore":
            self.squareRender()

        elif shape == "Hex":
            self.hexRender()

        elif shape == "Tri":
            self.triRender()

    def squareRender(self):
        minX = self.cells[0][0]
        maxX = self.cells[0][0]
        minY = self.cells[0][1]
        maxY = self.cells[0][1]
        for location in self.cells:
            if location[0] < minX:
                minX = location[0]
            elif location[0] > maxX:
                maxX = location[0]

            if location[1] < minY:
                minY = location[1]
            elif location[1] > maxY:
                maxY = location[1]

        xRange = maxX - minX + 1
        yRange = maxY - minY + 1
        print(xRange, yRange)

        preArray = np.zeros((yRange, xRange, 4), dtype=np.uint8)
        for j in range(yRange):
            for i in range(xRange):
                coord = (minX + i, minY + j)
                if coord not in self.cells:
                    preArray[j, i] = self.colors[0]
                else:
                    preArray[j, i] = self.colors[self.values[coord]]
        self.im = Image.fromarray(preArray, "RGBA")
        self.im.show()

    def hexRender(self):
        minX = self.cells[0][0]
        maxX = self.cells[0][0]
        minY = self.cells[0][1]
        maxY = self.cells[0][1]
        for location in self.cells:
            ersatzX = location[0] + location[1] // 2
            if ersatzX < minX:
                minX = ersatzX
            elif ersatzX > maxX:
                maxX = ersatzX

            if location[1] < minY:
                minY = location[1]
            elif location[1] > maxY:
                maxY = location[1]

        xRange = maxX - minX + 1
        yRange = maxY - minY + 1
        print(xRange, yRange)

        preArray = np.zeros((2 * yRange, 2 * xRange + yRange, 4), dtype=np.uint8)
        for j in range(yRange):
            y = 2 * j
            for i in range(xRange):
                x = 2 * i + yRange - j
                coord = (minX + i, minY + j)
                if coord not in self.cells:
                    color = self.colors[0]
                else:
                    color = self.colors[self.values[coord]]
                preArray[y, x] = color
                preArray[y + 1, x] = color
                preArray[y, x + 1] = color
                preArray[y + 1, x + 1] = color
        self.im = Image.fromarray(preArray, "RGBA")
        self.im.show()

    def triRender(self):
        minX = self.cells[0][0]
        maxX = self.cells[0][0]
        minY = self.cells[0][1]
        maxY = self.cells[0][1]
        for location in self.cells:
            ersatzX = location[0] + location[1] // 2
            if location[2] == -1:
                ersatzX += 1

            if ersatzX < minX:
                minX = ersatzX
            elif ersatzX > maxX:
                maxX = ersatzX

            if location[1] < minY:
                minY = location[1]
            elif location[1] > maxY:
                maxY = location[1]

        xRange = maxX - minX + 1
        yRange = maxY - minY + 1
        print(xRange, yRange)

        preArray = np.zeros((2 * yRange, 4 * xRange + yRange, 4), dtype=np.uint8)
        for j in range(yRange):
            y = 2 * j
            for i in range(xRange):
                x = 4 * i + yRange - 2 * j
                coord0 = (minX + i, minY + j, -1)
                if coord0 not in self.cells:
                    color0 = self.colors[0]
                else:
                    color0 = self.colors[self.values[coord0]]
                coord1 = (minX + i, minY + j, 1)
                if coord1 not in self.cells:
                    color1 = self.colors[0]
                else:
                    color1 = self.colors[self.values[coord1]]
                preArray[y, x] = color0
                preArray[y + 1, x - 1] = color0
                preArray[y + 1, x] = color0
                preArray[y + 1, x + 1] = color0
                preArray[y, x + 1] = color1
                preArray[y, x + 2] = color1
                preArray[y, x + 3] = color1
                preArray[y + 1, x + 2] = color1
        self.im = Image.fromarray(preArray, "RGBA")
        self.im.show()


pile = Interface()
